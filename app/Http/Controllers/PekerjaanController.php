<?php
bolt_decrypt( __FILE__ , 'qRNLAb'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnM7Cgp1c2UgQXBwXE1vZGVsc1xQZWtlcmphYW47CnVzZSBJbGx1bWluYXRlXEh0dHBcUmVxdWVzdDsKdXNlIElsbHVtaW5hdGVcU3VwcG9ydFxGYWNhZGVzXERCOwp1c2UgSWxsdW1pbmF0ZVxTdXBwb3J0XEZhY2FkZXNcVmFsaWRhdG9yOwp1c2UgWWFqcmFcRGF0YVRhYmxlc1xEYXRhVGFibGVzOwoKY2xhc3MgUGVrZXJqYWFuQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIKewogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKICAgIHsKICAgICAgICAkdGhpcy0+bWlkZGxld2FyZSgnYXV0aCcpOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBpbmRleChSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewogICAgICAgIGlmICgkcmVxdWVzdC0+YWpheCgpKSB7CiAgICAgICAgICAgICRkYXRhID0gREI6OnRhYmxlKCdwZWtlcmphYW5zJykKICAgICAgICAgICAgICAgIC0+c2VsZWN0KCdwZWtlcmphYW5zLmlkJywgJ3Bla2VyamFhbnMucGVrZXJqYWFuJykKICAgICAgICAgICAgICAgIC0+b3JkZXJCeSgncGVrZXJqYWFucy5wZWtlcmphYW4nLCAnYXNjJyk7CiAgICAgICAgICAgIHJldHVybiBEYXRhVGFibGVzOjpvZigkZGF0YSkKICAgICAgICAgICAgICAgIC0+YWRkSW5kZXhDb2x1bW4oKQogICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ2FjdGlvbicsIGZ1bmN0aW9uICgkZGF0YSkgewogICAgICAgICAgICAgICAgICAgICRidXR0b24gPSAnPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPic7CiAgICAgICAgICAgICAgICAgICAgJGJ1dHRvbiAuPSAnPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBkYXRhLWlkPSInIC4gJGRhdGEtPmlkIC4gJyIgY2xhc3M9ImJ0biBidG4tc3VjY2VzcyBtci0yIHBla2VyamFhbi1lZGl0Ij48aSBjbGFzcz0iZmFzIGZhLWVkaXQiPjwvaT48L2E+JzsKICAgICAgICAgICAgICAgICAgICBpZiAoYXV0aCgpLT51c2VyKCktPnJvbGVfaWQgPT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAkYnV0dG9uIC49ICc8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGRhdGEtaWQ9IicgLiAkZGF0YS0+aWQgLiAnIiBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIgbXItMiBwZWtlcmphYW4tZGVsZXRlIj48aSBjbGFzcz0iZmFzIGZhLXRyYXNoIj48L2k+PC9hPic7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRidXR0b24gLj0gJzwvZGl2JzsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGJ1dHRvbjsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPnJhd0NvbHVtbnMoWydhY3Rpb24nLCAnRFRfUm93SW5kZXgnXSkKICAgICAgICAgICAgICAgIC0+bWFrZSh0cnVlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZpZXcoJ2FwcC5tYXN0ZXIucGVrZXJqYWFuJyk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHN0b3JlKFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgaWYgKCRyZXF1ZXN0LT5hamF4KCkpIHsKICAgICAgICAgICAgJHZhbGlkID0gVmFsaWRhdG9yOjptYWtlKCRyZXF1ZXN0LT5hbGwoKSwgWwogICAgICAgICAgICAgICAgJ3Bla2VyamFhbicgPT4gJ3JlcXVpcmVkfHN0cmluZ3xtaW46MicsCiAgICAgICAgICAgIF0pOwogICAgICAgICAgICBpZiAoJHZhbGlkLT5mYWlscygpKSB7CiAgICAgICAgICAgICAgICAkZXJyID0gJHZhbGlkLT5nZXRNZXNzYWdlQmFnKCktPnRvQXJyYXkoKTsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRlcnIgYXMgJGUgPT4gJHYpIHsKICAgICAgICAgICAgICAgICAgICAkZXJyW10gPSAkdjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsnc3RhdHVzJyA9PiBmYWxzZSwgJ21lc3NhZ2UnID0+ICRlcnJdKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgJGFjdGlvbiA9IHN0cmxlbigkcmVxdWVzdC0+aWQpID4gMCA/IFBla2VyamFhbjo6ZmluZCgkcmVxdWVzdC0+aWQpIDogbmV3IFBla2VyamFhbigpOwogICAgICAgICAgICAgICAgICAgICRhY3Rpb24tPnBla2VyamFhbiA9ICRyZXF1ZXN0LT5wZWtlcmphYW47CiAgICAgICAgICAgICAgICAgICAgJGFjdGlvbi0+c2F2ZSgpOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoXEV4Y2VwdGlvbiAkZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsnc3RhdHVzJyA9PiBmYWxzZV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWydzdGF0dXMnID0+IHRydWVdKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZWRpdChSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewogICAgICAgIGlmICgkcmVxdWVzdC0+YWpheCgpKSB7CiAgICAgICAgICAgICR2YWxpZCA9IFZhbGlkYXRvcjo6bWFrZSgkcmVxdWVzdC0+YWxsKCksIFsKICAgICAgICAgICAgICAgICdpZCcgPT4gJ3JlcXVpcmVkfGludGVnZXInLAogICAgICAgICAgICBdKTsKICAgICAgICAgICAgaWYgKCR2YWxpZC0+ZmFpbHMoKSkgewogICAgICAgICAgICAgICAgJGVyciA9ICR2YWxpZC0+Z2V0TWVzc2FnZUJhZygpLT50b0FycmF5KCk7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkZXJyIGFzICRlID0+ICR2KSB7CiAgICAgICAgICAgICAgICAgICAgJGVycltdID0gJHY7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbIm1lc3NhZ2UiID0+ICRlcnIsICdzdGF0dXMnID0+IGZhbHNlXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkZGF0YSA9IERCOjp0YWJsZSgncGVrZXJqYWFucycpCiAgICAgICAgICAgICAgICAgICAgLT5zZWxlY3QoJ3Bla2VyamFhbnMuaWQnLCAncGVrZXJqYWFucy5wZWtlcmphYW4nKQogICAgICAgICAgICAgICAgICAgIC0+d2hlcmUoJ3Bla2VyamFhbnMuaWQnLCAkcmVxdWVzdC0+aWQpCiAgICAgICAgICAgICAgICAgICAgLT5maXJzdCgpOwogICAgICAgICAgICAgICAgaWYgKCRkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWydzdGF0dXMnID0+IHRydWUsICdkYXRhJyA9PiAkZGF0YV0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbJ3N0YXR1cycgPT4gZmFsc2VdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZGVzdHJveShSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewogICAgICAgIGlmICgkcmVxdWVzdC0+YWpheCgpKSB7CiAgICAgICAgICAgICR2YWxpZCA9IFZhbGlkYXRvcjo6bWFrZSgkcmVxdWVzdC0+YWxsKCksIFsKICAgICAgICAgICAgICAgICdpZCcgPT4gJ3JlcXVpcmVkfGludGVnZXInLAogICAgICAgICAgICBdKTsKICAgICAgICAgICAgaWYgKCR2YWxpZC0+ZmFpbHMoKSkgewogICAgICAgICAgICAgICAgJGVyciA9ICR2YWxpZC0+Z2V0TWVzc2FnZUJhZygpLT50b0FycmF5KCk7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkZXJyIGFzICRlID0+ICR2KSB7CiAgICAgICAgICAgICAgICAgICAgJGVycltdID0gJHY7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbIm1lc3NhZ2UiID0+ICRlcnIsICdzdGF0dXMnID0+IGZhbHNlXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAocGVrZXJqYWFuOjpmaW5kKCRyZXF1ZXN0LT5pZCktPmRlbGV0ZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWydzdGF0dXMnID0+IHRydWVdKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWydzdGF0dXMnID0+IGZhbHNlXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0K